import { Audio } from "expo-av";
import { useCallback, useEffect, useMemo, useState } from "react";
import { toast } from "react-hot-toast/src/core/toast";
import type { PayScreenProps } from "types";

let recording = new Audio.Recording();

export const useVoiceRecord = (props: PayScreenProps<"VoiceRecord">) => {
  // „É¨„Ç≥„Éº„Éá„Ç£„É≥„Ç∞‰∏≠
  const [isRecording, setisRecording] = useState<boolean>(false);
  // „Éû„Ç§„ÇØ„ÅÆ‰ΩøÁî®Ë®±ÂèØ
  const [audioPerm, setAudioPerm] = useState<boolean>(false);
  // Èå≤Èü≥„Éá„Éº„Çø‰øùÂ≠òÂÖàURI
  const [recordedURI, setRecordedURI] = useState("");

  // Èå≤Èü≥ÈñãÂßã
  const onStartRecording = useCallback(async () => {
    if (audioPerm) {
      try {
        await recording.prepareToRecordAsync(Audio.RECORDING_OPTIONS_PRESET_HIGH_QUALITY);
        await recording.startAsync();

        setisRecording(true);
      } catch (error) {
        console.info(error);
      }
    } else {
      getPermission();
    }
  }, [audioPerm]);

  // Èå≤Èü≥ÂÅúÊ≠¢
  const onStopRecording = useCallback(async () => {
    try {
      const toastId = toast.loading("Âá¶ÁêÜ‰∏≠...", {
        icon: "üíÅ‚Äç‚ôÇÔ∏è",
      });

      // Èå≤Èü≥„ÇíÂÅúÊ≠¢„Åô„Çã
      await recording.stopAndUnloadAsync();

      // Èå≤Èü≥„Éá„Éº„Çø„ÅÆURI„ÇíÂèñÂæó
      const result = recording.getURI();

      if (!result) {
        toast("„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü", {
          id: toastId,
          icon: "ü§¶‚Äç‚ôÇÔ∏è",
        });
        return;
      }

      // Èå≤Èü≥„Éá„Éº„Çø„ÅÆURI„Çí‰øùÂ≠ò
      setRecordedURI(result);

      toast("Èå≤Èü≥„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü", {
        id: toastId,
        icon: "ü§¶‚Äç‚ôÇÔ∏è",
      });
      await new Promise((resolve) => setTimeout(resolve, 1000));

      // Èå≤Èü≥Áî®„Ç§„É≥„Çπ„Çø„É≥„Çπ„ÇíÂàùÊúüÂåñ
      recording = new Audio.Recording();
      // Èå≤Èü≥Áä∂ÊÖã„Çífalse„Å´„Åô„Çã
      setisRecording(false);

      const { amount } = props.route.params;
      props.navigation.replace("Passcode", {
        amount: amount,
        uri: result,
      });

      // props.navigation.navigate("VoiceRecordSettingSelect");
    } catch (error) {
      console.info(error);
    }
  }, [recordedURI]);

  // „Éû„Ç§„ÇØ„ÅÆ‰ΩøÁî®Ë®±ÂèØ„ÇíÂèñÂæó
  const getPermission = useCallback(async () => {
    // „Éû„Ç§„ÇØ„ÅÆ‰ΩøÁî®„ÇíÂ∞ã„Å≠„Çã
    const getAudioPerm = await Audio.requestPermissionsAsync();
    // iOS„Åä„Çà„Å≥Android„Åß„ÅÆ„Ç™„Éº„Éá„Ç£„Ç™„Ç®„ÇØ„Çπ„Éö„É™„Ç®„É≥„Çπ„Çí„Ç´„Çπ„Çø„Éû„Ç§„Ç∫
    await Audio.setAudioModeAsync({
      // iOS„ÅßË®òÈå≤„ÇíÊúâÂäπ„Å´„Åô„Çã„Åã
      allowsRecordingIOS: true,
      // iOS„Åß„Ç®„ÇØ„Çπ„Éö„É™„Ç®„É≥„Çπ„ÅÆ„Ç™„Éº„Éá„Ç£„Ç™„Çí„Çµ„Ç§„É¨„É≥„Éà„É¢„Éº„Éâ„ÅßÂÜçÁîü„Åô„Çã„Åã
      playsInSilentModeIOS: true,
    });
    setAudioPerm(getAudioPerm.granted);
  }, []);

  const onRecordingEvent = useMemo(() => {
    return isRecording ? onStopRecording : onStartRecording;
  }, [isRecording, onStartRecording, onStopRecording]);

  useEffect(() => {
    getPermission();
  }, []);

  return {
    isRecording,
    recordedURI,
    onRecordingEvent,
  };
};
